generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid           String         @unique
  createdAt      DateTime       @default(now()) @map("createdAt")
  updatedAt      DateTime       @updatedAt @map("updatedAt")
  
  email          String?        @unique
  phone_number   String         @unique
  birth_day      String?
  first_name     String?      
  second_name    String?      
  password       String?        @unique
  avatarPath     String?        @default("default-avatar.png") @map("avatar_path")
  verified       Boolean?
  verifyToken    String?        @unique
  role           EnumRoleOfUser @default(DEFAULT_USER)
  currentAddress String?

  companyUuid    String?        @map("companyUuid")
  company        Company?       @relation(fields: [companyUuid], references: [uuid])
 
  addresses      Address[]
  orders         Order[]
  favorites      Product[]
  reviews        Review[]
  clicks         UserClick[]
}

model Product {
  uuid          String        @unique
  createdAt     DateTime      @default(now()) @map("createdAt")
  updatedAt     DateTime      @updatedAt @map("updatedAt")

  name          String        @unique
  slug          String        @unique
  description   String
  peculiarities String?
  quantity      Int
  price         Int
  discount      Int
  images        String[]      @default(["default-product-photo.png"])
  unitofmeasurement String
  inStock       Boolean?      @default(false)
  
  userUuid      String?       @map("userUuid")
  subcategoryUuid String?     @map("subcategoryUuid")
  companyUuid   String?       @map("companyUuid") 

  orderItems    OrderItem[]
  reviews       Review[]
  photoFiles    PhotoFile[]
  clicks        UserClick[]


  company       Company?       @relation(fields: [companyUuid], references: [uuid])
  user          User?         @relation(fields: [userUuid], references: [uuid])
  subcategory   Subcategory?  @relation(fields: [subcategoryUuid], references: [uuid])
}

model UserClick {
  uuid          String       @unique
  clickedAt     DateTime     @default(now())
  userUuid      String
  productUuid   String
  
  product       Product      @relation(fields: [productUuid], references: [uuid])
  user          User         @relation(fields: [userUuid], references: [uuid])
}


model PhotoFile {
  uuid         String        @unique
  createdAt    DateTime      @default(now()) @map("createdAt")
  updatedAt    DateTime      @updatedAt @map("updatedAt")

  url          String        @unique
  filename     String
  originalname String
  mimetype     String
  size         Int
  path         String
  productUuid  String?       @map("productUuid")
  product      Product?      @relation(fields: [productUuid], references: [uuid])
  subcategoryUuid String?    @map("subcategoryUuid") @unique
}

model Category {
  uuid        String         @unique
  createdAt   DateTime       @default(now()) @map("createdAt")
  updatedAt   DateTime       @updatedAt @map("updatedAt")

  icon        String?        @default("default-product-photo.png")
  name        String         @unique
  slug        String         @unique

  subcategory Subcategory[]
}

model Subcategory {
  uuid        String         @unique
  createdAt   DateTime       @default(now()) @map("createdAt")
  updatedAt   DateTime       @updatedAt @map("updatedAt")

  name        String
  slug        String         @unique
  icon        String?        @default("default-product-photo.png")

  categoryUuid String?       @map("categoryUuid")
  category     Category?     @relation(fields: [categoryUuid], references: [uuid])
  products     Product[]
}

model Review {
  uuid        String         @unique
  createdAt   DateTime       @default(now()) @map("createdAt")
  updatedAt   DateTime       @updatedAt @map("updatedAt")

  rating      Int
  text        String
  userUuid    String         @map("userUuid")
  productUuid String?        @map("productUuid")
  product     Product?       @relation(fields: [productUuid], references: [uuid])
  user        User           @relation(fields: [userUuid], references: [uuid])
}

model Order {
  uuid         String         @unique
  createdAt    DateTime       @default(now()) @map("createdAt")
  updatedAt    DateTime       @updatedAt @map("updatedAt")

  orderId      String         @unique
  comment      String?
  total        Int
  status       EnumOrderItemStatus @default(Pending)
  isDelivery   Boolean?        @default(false)
  isActual     Boolean?        @default(false)
 
  items        OrderItem[]
 
  address      Address        @relation(fields: [addressUuid], references: [uuid])
  user         User           @relation(fields: [userUuid], references: [uuid])
 
  addressUuid  String         @map("addressUuid")
  userUuid     String         @map("userUuid")
}

model OrderItem {
  uuid        String         @unique
  createdAt   DateTime       @default(now()) @map("createdAt")
  updatedAt   DateTime       @updatedAt @map("updatedAt")

  quantity    Decimal
  price       Int
  inStock     Boolean?       @default(false)

  order       Order?         @relation(fields: [orderUuid], references: [uuid])
  orderUuid   String?        @map("orderUuid")

  product     Product        @relation(fields: [productUuid], references: [uuid])
  productUuid String         @map("productUuid")

  @@map("Order_item")
}

model Address {
  uuid        String         @unique
  createdAt   DateTime       @default(now()) @map("createdAt")
  updatedAt   DateTime       @updatedAt @map("updatedAt")

  town        String
  street      String
  house       String
  apartment   String?
  intercom    String?
  entrance    String?
  floor       String?

  
  userUuid    String         @map("userUuid")

  orders      Order[]

  user        User           @relation(fields: [userUuid], references: [uuid])
}

model Company {
  uuid               String     @unique
  createdAt          DateTime   @default(now()) @map("createdAt")
  updatedAt          DateTime   @updatedAt @map("updatedAt")

  name               String     @unique
  officialName        String
  registrationNumber String     @unique
  address            String
  email              String     @unique
  phoneNumber        String

  users              User[]
  products           Product[]
}

enum EnumOrderItemStatus {
  Pending
  Payed
  In_Delivery
  Delivered
  Canceled
}

enum EnumRoleOfUser {
  ADMIN
  DEFAULT_USER
  MANAGER
  COURIER
  COMPANY
}


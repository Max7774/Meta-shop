name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21.5.0"

      - name: Execute SSH command .env
        working-directory: ./backend
        run: |
          cat > .env << EOD
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          SERVER_URL=${{ secrets.SERVER_URL }}
          DESTINATION=uploads/
          DESTINATION_RECEIPTS='receipts/'
          APP_VERSION="1.0.1-${{ github.run_number }}"
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          MAILDEV_INCOMING_USER=${{ secrets.MAILDEV_INCOMING_USER }}
          MAILDEV_AUDIT_USER=${{ secrets.MAILDEV_AUDIT_USER }}
          MAILDEV_INCOMING_PASS=${{ secrets.MAILDEV_INCOMING_PASS }}
          EOD
          echo "::set-output name=backend_version::1.0.1-${{ github.run_number }}"
      - name: Execute SSH command docker-compose.yml
        working-directory: ./backend
        run: |
          cat > docker-compose.yml << EOD
          version: '3.8'

          services:
            app:
              build: .
              restart: always
              ports:
                - "3000:3000"
              env_file:
                - .env
              volumes:
                - /Meta-shop/backend/uploads:/backend_meta_shop/uploads
              depends_on:
                - db

            db:
              image: postgres:13
              restart: always
              environment:
                POSTGRES_USER: ${{ secrets.DB_USER }}
                POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
                POSTGRES_DB: ${{ secrets.DB_NAME }}
              volumes:
                - pgdata:/var/lib/postgresql/data

          volumes:
            pgdata:
          EOD

      - name: Set seeder.prod.ts
        working-directory: ./backend
        run: |
          cat > seed/seeder.prod.ts << EOT
          ${{ secrets.SEEDER }}
          main()
          .catch((e) => console.error(e))
          .finally(async () => {
            await prisma.\$disconnect();
          });
          EOT

      - name: Copy files via SCP
        run: |
          scp -o StrictHostKeyChecking=no -r ./backend/* ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:/Meta-shop/backend/

      - name: Copy files and deploy .env
        run: |
          scp -o StrictHostKeyChecking=no -r ./backend/.env ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:/Meta-shop/backend/

      - name: Copy files and deploy .dockerignore
        run: |
          scp -o StrictHostKeyChecking=no -r ./backend/.dockerignore ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:/Meta-shop/backend/

      - name: SSH [Down volumes]
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} << 'EOF'
          cd /Meta-shop/backend
          docker-compose down
          EOF

      - name: SSH [Compose - Build]
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} << 'EOF'
          cd /Meta-shop/backend
          docker-compose build --no-cache
          docker ps
          EOF

      - name: SSH [Compose Up -d]
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} << 'EOF'
          cd /Meta-shop/backend
          docker-compose up -d
          docker ps
          docker system prune -a -f


          systemctl restart nginx
          EOF

  deploy_frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21.5.0"
      - name: Install dependencies
        uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: "frontend"

      - name: Set .env
        working-directory: ./frontend
        run: |
          cat > .env << EOT
          VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}
          VITE_VERSION="1.0.1-${{ github.run_number }}"
          EOT
          echo "::set-output name=frontend_version::1.0.1-${{ github.run_number }}"

      - name: Build
        uses: borales/actions-yarn@v4
        with:
          cmd: build
          dir: "frontend"

      - name: Copy built frontend to server
        run: |
          scp -o StrictHostKeyChecking=no -r ./frontend/build/* ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:/var/www/html
  notify:
    runs-on: ubuntu-latest
    needs: [deploy_backend, deploy_frontend]
    steps:
      - name: Send notification to Telegram
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          BUILD_NUMBER: ${{ github.run_number }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}
          BACKEND_VERSION: ${{ needs.deploy_backend.outputs.backend_version }}
          FRONTEND_VERSION: ${{ needs.deploy_frontend.outputs.frontend_version }}
        run: |
          MESSAGE="🚀 *Деплой завершен!*\n\n"
          MESSAGE+="*Номер сборки:* \`${BUILD_NUMBER}\`\n"
          MESSAGE+="*Коммит:* \`${COMMIT_MESSAGE}\`\n"
          MESSAGE+="*Автор:* \`${COMMIT_AUTHOR}\`\n"
          MESSAGE+="*Версия бэкенда:* \`${BACKEND_VERSION}\`\n"
          MESSAGE+="*Версия фронтенда:* \`${FRONTEND_VERSION}\`"
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
          -d chat_id=${TELEGRAM_CHAT_ID} \
          -d parse_mode="Markdown" \
          -d text="$MESSAGE"

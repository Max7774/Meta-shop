name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      # Сборка фронтенда в GitHub Actions
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21.5.0"

      - name: Execute SSH command .env [Backend]
        working-directory: ./backend
        run: |
          cat > .env << EOT
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          SERVER_URL=${{ secrets.SERVER_URL }}
          DESTINATION=/backend_meta_shop/uploads
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          MAILDEV_INCOMING_USER=${{ secrets.MAILDEV_INCOMING_USER }}
          MAILDEV_AUDIT_USER=${{ secrets.MAILDEV_AUDIT_USER }}
          MAILDEV_INCOMING_PASS=${{ secrets.MAILDEV_INCOMING_PASS }}
          EOT
      - name: Execute SSH command docker-compose.yml [Backend]
        working-directory: ./backend
        run: |
          cat > docker-compose.yml << EOD
          version: '3.8'

          services:
            app:
              build: .
              restart: always
              ports:
                - "3000:3000"
              env_file:
                - .env
              volumes:
                - ./backend/uploads:/backend_meta_shop/uploads
              depends_on:
                - db

            db:
              image: postgres:13
              restart: always
              environment:
                POSTGRES_USER: ${{ secrets.DB_USER }}
                POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
                POSTGRES_DB: ${{ secrets.DB_NAME }}
              volumes:
                - pgdata:/var/lib/postgresql/data

          volumes:
            pgdata:
          EOD

      - name: Install dependencies [Frontend]
        uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: "frontend"

      - name: Set .env [Frontend]
        working-directory: ./frontend
        run: |
          cat > .env << EOT
          VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}
          EOT

      - name: Build [Frontend]
        uses: borales/actions-yarn@v4
        with:
          cmd: build
          dir: "frontend"

      - name: Copy built frontend to server
        run: |
          scp -o StrictHostKeyChecking=no -r ./frontend/build/* ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:/var/www/html

      - name: Set seeder.prod.ts [Backend]
        working-directory: ./backend
        run: |
          cat > seed/seeder.prod.ts << EOT
          ${{ secrets.SEEDER }}
          main()
          .catch((e) => console.error(e))
          .finally(async () => {
            await prisma.\$disconnect();
          });
          EOT

      - name: Copy files via SCP [Backend]
        run: |
          scp -o StrictHostKeyChecking=no -r ./backend/* ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:/Meta-shop/backend

      - name: Deploy by SSH [Down volumes]
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} << 'EOF'
          cd /Meta-shop/backend
          docker-compose down
          EOF

      - name: Deploy by SSH [Compose]
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} << 'EOF'
          cd /Meta-shop/backend
          docker-compose build --no-cache
          docker ps
          EOF

      - name: Deploy by SSH [Compose]
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} << 'EOF'
          cd /Meta-shop/backend
          docker-compose up -d
          docker ps

          systemctl restart nginx
          EOF
